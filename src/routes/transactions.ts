import { Router, Request, Response } from 'express';
import Transaction from '../models/Transaction';
import Book from '../models/Book';
import User from '../models/User';

const router = Router();

// Issue a book (add transaction)
router.post('/issue', async (req: Request, res: Response) => {
  const { book_name, name, issue_date } = req.body;

  if (!book_name || !name || !issue_date) {
    return res.status(400).json({ message: 'Missing required fields' });
  }

  const book = await Book.findOne({ book_name });
  const user = await User.findOne({ name });

  if (!book || !user) {
    return res.status(400).json({ message: 'Invalid book or user' });
  }

  const transaction = new Transaction({
    book_name: book.book_name, 
    name: user.name, 
    issue_date: new Date(issue_date),
    return_date: null,
    rent: null
  });

  try {
    await transaction.save();
    res.json({ message: 'Book issued successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server Error' });
  }
});

// Return a book and calculate rent
router.post('/return', async (req: Request, res: Response) => {
  const { book_name, name, return_date } = req.body;

  try {
    // Validate inputs
    if (!book_name || !name || !return_date) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    // Find the book
    const book = await Book.findOne({ book_name });
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }

    // Find the user by name (assuming user_name is unique, otherwise search by user ID)
    const user = await User.findOne({ name});
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Find the corresponding transaction
    const transaction = await Transaction.findOne({
      book_name: book.book_name,
      name: user.name,
      return_date: null // We need to find the open transaction
    });

    if (!transaction) {
      return res.status(404).json({ error: 'Transaction not found' });
    }

    // Calculate the rent
    const issueDate = new Date(transaction.issue_date);
    const returnDate = new Date(return_date);
    const rentPerDay = book.rent_per_day;

    const daysIssued = Math.ceil((returnDate.getTime() - issueDate.getTime()) / (1000 * 3600 * 24));
    const totalRent = daysIssued * rentPerDay;

    // Update the transaction with the return date and calculated rent
    transaction.return_date = returnDate;
    transaction.rent = totalRent;

    await transaction.save();

    return res.status(200).json({ message: 'Book returned successfully', transaction });
  } catch (error) {
    console.error('Error returning book:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});
// Get people who issued a book
router.get('/book', async (req: Request, res: Response) => {
  const { name } = req.query;
  const book = await Book.findOne({ book_name: name as string });
  const current = await Transaction.findOne({ book_name: book?.book_name, return_date: null });
  const history = await Transaction.countDocuments({ name: book?.book_name });

  res.json({ history, current });
});

// Get total rent generated by a book
router.get('/rent', async (req: Request, res: Response) => {
  const { name } = req.query;
  const book = await Book.findOne({ book_name: name as string });

  const result = await Transaction.aggregate([
    { $match: { book_id: book?._id, rent: { $exists: true } } },
    { $group: { _id: null, totalRent: { $sum: '$rent' } } }
  ]);

  res.json({ totalRent: result[0]?.totalRent || 0 });
});

// Get books issued by user
router.get('/user', async (req: Request, res: Response) => {
  const { name } = req.query;
  const transactions = await Transaction.find({ name: name, return_date: null }).populate('book_id');
  res.json(transactions);
});

// Get books issued in a date range
router.get('/range', async (req: Request, res: Response) => {
  const { start, end } = req.query;
  const transactions = await Transaction.find({
    issue_date: { $gte: new Date(start as string), $lte: new Date(end as string) }
  }).populate('user_id book_id');

  res.json(transactions);
});

export default router;
